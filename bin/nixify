#!/usr/bin/env bash

set -e
set -u
set -o pipefail

NIXIFY_DEBUG="${NIXIFY_DEBUG:-flase}"
[ "$NIXIFY_DEBUG" = "true" ] && set -x

NIXIFY_ENV_NAME="${NIXIFY_ENV_NAME:-}"
SKIP_EDITOR="${SKIP_EDITOR:-false}"
OVERRIDE_FILES="${OVERRIDE_FILES:-false}"

NIXIFY_CONFIGURE_AUTOENV="${NIXIFY_CONFIGURE_AUTOENV:-true}"
NIXIFY_AUTOENV_ENTER="${NIXIFY_AUTOENV_ENTER:-.env}"
NIXIFY_AUTOENV_LEAVE="${NIXIFY_AUTOENV_LEAVE:-.out}"


TARGET_DIR="${TARGET_DIR:-$(pwd)}"
CURRENT_DIR="$(pwd)"
WORKING_DIR="$(mktemp -d)"
trap "rm -rf $WORKING_DIR" EXIT TERM


NIXIFY_TEMPLATE_ROOT="$(realpath $(dirname $0)/..)/share/nixify/templates/"
NIXIFY_TEMPLATE_DIR="${NIXIFY_TEMPLATE_DIR:-${HOME}/.nixify/templates}"
NIXIFY_TEMPLATE="${NIXIFY_TEMPLATE:-generic}"

declare -A TEMPLATES
if [ -d "$NIXIFY_TEMPLATE_ROOT" ]; then
  while read template; do
    [ -d "$template" ] && TEMPLATES["$(basename $template)"]="$(realpath $template)"
  done < <(find $NIXIFY_TEMPLATE_ROOT -mindepth 1 -maxdepth 1 -type d)
fi
if [ -d "$NIXIFY_TEMPLATE_DIR" ]; then
  while read template; do
    [ -d "$template" ] && TEMPLATES["$(basename $template)"]="$(realpath $template)"
  done < <(find $NIXIFY_TEMPLATE_DIR -mindepth 1 -maxdepth 1 -type d)
fi

usage() {
    echo "nixify <options> [name]"
    echo "Bootstrap a nix-shell environment for development"
    echo ""
    echo "Options:"
    echo "  -p --path            : Path of the directory to nixify (default: pwd)"
    echo "  -y --yes             : Always assume 'yes' when asking questions (WARNING: will override existing files)"
    echo "  -t --template        : The template to use for bootstrapping (default: generic)"
    echo "  --no-editor          : Do not launch the EDITOR for shell.nix after completion"
    echo "  --no-autoenv         : Do not configure any autoenv environemt"
    echo "  -h --help            : Print this message and exit"
    echo ""
    echo "Templates:"
    for template in "${!TEMPLATES[@]}"; do echo "  $template"; done
    echo ""
}

error_exit() {
    echo "[ERROR] $@" 1>&2
    exit 1
}

ask_file_override() {
    local filename="${1:-}"

    ([ -e "${filename}" ] && [ "${OVERRIDE_FILES}" = "false" ]) || return 0
    read -p "File ${filename} already exists. Override? " -n 1 -r
    echo    # (optional) move to a new line
    [[ $REPLY =~ ^[Yy]$ ]] && return 0
    return 1
}

build_temp_files() {
  local template_dir="${TEMPLATES[$NIXIFY_TEMPLATE]}"
  local generic_dir="${TEMPLATES[generic]}"

  while read t; do
    cp -a "$t" "$WORKING_DIR"
  done < <(find $generic_dir -mindepth 1 -maxdepth 1 ! -regex ".*NIXIFY_[A-Z_]+$" ! -iregex ".*README[^/]*$" ! -iregex ".*LICENSE[^/]*$")

  if [ "$template_dir" != "$generic_dir" ]; then
    while read t; do
      cp -a "$t" "$WORKING_DIR"
    done < <(find $template_dir -mindepth 1 -maxdepth 1 ! -regex ".*NIXIFY_[A-Z_]+$" ! -iregex ".*README[^/]*$" ! -iregex ".*LICENSE[^/]*$")
  fi

  find $WORKING_DIR -name "autoenv_enter" -exec mv {} "$(dirname {})/${NIXIFY_AUTOENV_ENTER}"  \;
  find $WORKING_DIR -name "autoenv_leave" -exec mv {} "$(dirname {})/${NIXIFY_AUTOENV_LEAVE}"  \;
}

replace_in_working_dir() {
  local replacement_name="$1"
  local replacement_value="$2"
  local file="$3"

  awk -v r="${replacement_value}" "{gsub(/ *{{${replacement_name}}}/,r)}1" "$file" > "$file.new"
  mv "$file.new" "$file"
}

populate_templates() {
  local template_dir="${TEMPLATES[$NIXIFY_TEMPLATE]}"

  while read file; do
    replace_in_working_dir NIXIFY_ENV_NAME "$NIXIFY_ENV_NAME" "$file"

    for varname in $(cat "$file" | grep -o -E "\{\{[A-Z_]+}}" | grep -o -E "[A-Z_]+" ); do
      if [ -e "$template_dir/$varname" ]; then
        local var_value="$(cat "$template_dir/$varname")"
        replace_in_working_dir "$varname" "$var_value" "$file"
      else
        replace_in_working_dir "$varname" "" "$file"
      fi
    done
  done < <(find $WORKING_DIR -type f )
}

populate_target_dir() {
  for target in $(find "${WORKING_DIR}" -mindepth 1 -maxdepth 1); do
    local relative_path="$(echo $target | sed 's#'"${WORKING_DIR}"'##g')"
    if ask_file_override "${TARGET_DIR}/$relative_path"; then
      cp -a "$target" "${TARGET_DIR}/"
    fi
  done
}

generate_gitignore() {
    if [ -d "${TARGET_DIR}/.git" ]; then
        echo "" >> "${TARGET_DIR}/.gitignore"

        grep -q "shell.nix" "${TARGET_DIR}/.gitignore" || echo "shell.nix" >> "${TARGET_DIR}/.gitignore"
        grep -q ".env" "${TARGET_DIR}/.gitignore" || echo ".env" >> "${TARGET_DIR}/.gitignore"
        grep -q ".out" "${TARGET_DIR}/.gitignore" || echo ".out" >> "${TARGET_DIR}/.gitignore"
    fi
}

while [ "$#" -gt 0 ]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        --no-editor)
            SKIP_EDITOR="true"
            ;;
        --no-autoenv)
            NIXIFY_CONFIGURE_AUTOENV="false"
            ;;
        -y|--yes)
            OVERRIDE_FILES="true"
            ;;
        -p|--path)
            shift
            TARGET_DIR="$(realpath $1)"
            [ -d "$TARGET_DIR" ] || error_exit "Path $1 is not a directory"
            ;;
        -t|--template)
            shift
            NIXIFY_TEMPLATE="$1"
            if [ ! "${TEMPLATES[$NIXIFY_TEMPLATE]+_}" ]; then
              usage
              error_exit "Unknown template: $NIXIFY_TEMPLATE"
            fi
            ;;
        *)
            if [ -z "${NIXIFY_ENV_NAME}" ]; then
                NIXIFY_ENV_NAME="$1"
            else
                echo "Unknown option: $1" 1>&2
                usage
                exit 1
            fi
            ;;
        esac
    shift
done

[ -n "$NIXIFY_ENV_NAME" ] || {
    usage
    error_exit "No name given"
}

NIXIFY_TEMPLATE_PATH="${TEMPLATES[$NIXIFY_TEMPLATE]}"
[ -d "$NIXIFY_TEMPLATE_PATH" ] || error_exit "Template $NIXIFY_TEMPLATE does not exist."

cd "$WORKING_DIR"

build_temp_files
populate_templates
populate_target_dir
generate_gitignore

([ -n "$EDITOR" ] &&  [ -e "${TARGET_DIR}/shell.nix" ] && [ "${SKIP_EDITOR}" != "true" ]) && exec "$EDITOR" +8 "${TARGET_DIR}/shell.nix"
